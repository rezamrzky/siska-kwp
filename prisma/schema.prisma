generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dr_ingredient {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar
  unit                  String                  @db.VarChar
  dr_ingredient_product dr_ingredient_product[]
  dr_recipe_ingredients dr_recipe_ingredients[]
}

model dr_ingredient_product {
  id                         Int                          @id @default(autoincrement())
  ingredient_id              Int
  brand                      String                       @db.VarChar
  product_unit               String                       @db.VarChar
  quantity                   Int
  dr_ingredient              dr_ingredient                @relation(fields: [ingredient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dr_restock_product         dr_restock_product[]
  dr_restock_product_confirm dr_restock_product_confirm[]
  dr_stock                   dr_stock[]
}

model dr_menu {
  id            Int             @id @unique @default(autoincrement())
  date          DateTime        @unique @db.Date
  is_submited   Boolean
  is_edited     Boolean
  is_approved   Boolean
  dr_menu_shift dr_menu_shift[]
}

model dr_menu_shift {
  id          Int     @id @default(autoincrement())
  menu_id     Int
  shift_cat   Int
  is_approved Boolean
  recipe_ids  Int[]
  dr_menu     dr_menu @relation(fields: [menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model dr_modal {
  id           Int      @id @default(autoincrement())
  date         DateTime @db.Date
  total        Decimal  @db.Money
  created_date DateTime @db.Timestamptz(6)
  created_by   String   @db.VarChar
  staff        staff    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model dr_recipe {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar
  portion               Int
  created_at            DateTime                @db.Timestamptz(6)
  updated_by            String?                 @db.VarChar
  updated_date          DateTime?               @db.Date
  staff                 staff?                  @relation(fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dr_recipe_ingredients dr_recipe_ingredients[]
}

model dr_recipe_ingredients {
  recipe_id     Int
  ingredient_id Int
  quantity      Int
  dr_ingredient dr_ingredient @relation(fields: [ingredient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dr_recipe     dr_recipe     @relation(fields: [recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([recipe_id, ingredient_id])
}

model dr_report {
  id           Int     @id @default(autoincrement())
  saldo        Decimal @db.Money
  action       Int
  reference_id Int
}

model dr_restock {
  id                         Int                          @id @default(autoincrement())
  created_at                 DateTime                     @db.Timestamptz(6)
  initial_date               DateTime                     @db.Date
  finish_date                DateTime                     @db.Date
  total                      Int
  is_approved                Boolean
  status                     Int
  is_stock_confirmed         Boolean
  dr_restock_bill            dr_restock_bill[]
  dr_restock_payment         dr_restock_payment[]
  dr_restock_product         dr_restock_product[]
  dr_restock_product_confirm dr_restock_product_confirm[]
}

model dr_restock_bill {
  id           Int        @id @default(autoincrement())
  date         DateTime   @db.Date
  total        Int
  proof        Bytes
  confirm_date DateTime   @db.Timestamptz(6)
  confirm_by   String     @db.VarChar
  restock_id   Int
  staff        staff      @relation(fields: [confirm_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dr_restock   dr_restock @relation(fields: [restock_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model dr_restock_payment {
  id           Int        @id @unique @default(autoincrement())
  date         DateTime   @db.Date
  total        Decimal    @db.Money
  proof        Bytes
  confirm_date DateTime   @db.Timestamptz(6)
  confirm_by   String     @db.VarChar
  restock_id   Int
  staff        staff      @relation(fields: [confirm_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dr_restock   dr_restock @relation(fields: [restock_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model dr_restock_product {
  restock_id            Int
  product_id            Int
  quantity              Int
  dr_ingredient_product dr_ingredient_product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dr_restock            dr_restock            @relation(fields: [restock_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([restock_id, product_id])
}

model dr_restock_product_confirm {
  restock_id            Int
  product_id            Int
  created_date          DateTime              @db.Timestamptz(6)
  quantity              Int
  dr_ingredient_product dr_ingredient_product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dr_restock            dr_restock            @relation(fields: [restock_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([restock_id, product_id])
}

model dr_stock {
  id                    Int                   @id @default(autoincrement())
  date                  DateTime              @db.Date
  product_id            Int
  quantity              Int
  action                Int
  dr_ingredient_product dr_ingredient_product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model fd_bill {
  id               Int               @id @unique @default(autoincrement())
  total_before_tax Decimal           @db.Money
  ppn10            Decimal           @db.Money
  pph23            Decimal           @db.Money
  total_after_tax  Decimal           @db.Money
  date             DateTime          @db.Date
  status           String            @db.Char
  note             String
  created_by       String            @db.VarChar
  created_at       DateTime          @db.Timestamptz(6)
  staff            staff             @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fd_bill_staff_id_fkey")
  fd_bill_payment  fd_bill_payment[]
  fd_event         fd_event[]
}

model fd_bill_payment {
  id           Int      @id @unique @default(autoincrement())
  total        Decimal  @db.Money
  date         DateTime @db.Date
  confirm_date DateTime @db.Timestamptz(6)
  confirm_by   String   @db.VarChar
  bill_id      Int
  fd_bill      fd_bill  @relation(fields: [bill_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff        staff    @relation(fields: [confirm_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model fd_event {
  id               Int               @id @default(autoincrement())
  event_date       DateTime          @db.Timestamp()
  event_place      String            @db.VarChar
  department       String            @db.VarChar
  purpose          String
  vendor           String            @db.VarChar
  total_pax        String            @db.VarChar
  total_price      Decimal           @db.Money
  status           String            @db.VarChar
  staff_id         String            @db.VarChar
  created_at       DateTime          @db.Date
  confirmed_date   DateTime?         @db.Timestamptz(6)
  payment_id       Int?
  bill_id          Int?
  fd_bill          fd_bill?          @relation(fields: [bill_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fd_event_payment fd_event_payment? @relation(fields: [payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff            staff             @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model fd_event_payment {
  id             Int        @id(map: "fd_payment_pkey") @default(autoincrement())
  date           DateTime   @db.Date
  total          Decimal    @db.Money
  proof_name     String     @db.VarChar
  confirmed_by   String     @db.VarChar
  confirmed_date DateTime   @db.Timestamptz(6)
  fd_event       fd_event[]
}

model staff {
  id                 String               @id @unique @db.VarChar
  name               String               @db.VarChar
  department         String               @db.VarChar
  position           String               @db.VarChar
  join_date          DateTime             @db.Date
  address            String
  phone_numb         String               @unique @db.VarChar
  email              String?              @unique @db.VarChar
  birth_place        String
  birth_date         DateTime             @db.Date
  is_married         Boolean
  have_children      Int
  bpjs_id            String               @unique @db.VarChar
  npwp               String               @unique @db.VarChar
  salary             Decimal              @db.Money
  dr_modal           dr_modal[]
  dr_recipe          dr_recipe[]
  dr_restock_bill    dr_restock_bill[]
  dr_restock_payment dr_restock_payment[]
  fd_bill            fd_bill[]
  fd_bill_payment    fd_bill_payment[]
  fd_event           fd_event[]
  user               user?
}

model user {
  staff_id   String    @unique @db.VarChar
  username   String    @unique @db.VarChar
  password   String    @db.VarChar
  last_login DateTime? @db.Date
  status     String    @db.VarChar
  id         String    @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  authToken  String?   @db.Uuid
  staff      staff     @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
